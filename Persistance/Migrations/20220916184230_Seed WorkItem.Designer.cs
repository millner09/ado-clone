// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistance;

#nullable disable

namespace Persistance.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220916184230_Seed WorkItem")]
    partial class SeedWorkItem
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthProviderId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("Domain.WorkItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkItemTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkItemTypeId");

                    b.ToTable("WorkItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e21d546-e35e-40da-878f-c99baeac247e"),
                            Title = "Seed User Story in Database",
                            WorkItemTypeId = new Guid("5fe4f257-f7a3-4996-9818-b72098dcb59c")
                        });
                });

            modelBuilder.Entity("Domain.WorkItemState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkItemBaseState")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkItemTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkItemTypeId");

                    b.ToTable("WorkItemStates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("af304833-a099-4103-81c1-6701d3ce7f23"),
                            Name = "New",
                            WorkItemBaseState = 0,
                            WorkItemTypeId = new Guid("5fe4f257-f7a3-4996-9818-b72098dcb59c")
                        },
                        new
                        {
                            Id = new Guid("ac23df95-30a9-4bd9-bd8f-db1ee4024525"),
                            Name = "Active",
                            WorkItemBaseState = 1,
                            WorkItemTypeId = new Guid("5fe4f257-f7a3-4996-9818-b72098dcb59c")
                        },
                        new
                        {
                            Id = new Guid("c32f27c7-b77d-494b-a5e7-c5846537562f"),
                            Name = "Resolved",
                            WorkItemBaseState = 1,
                            WorkItemTypeId = new Guid("5fe4f257-f7a3-4996-9818-b72098dcb59c")
                        },
                        new
                        {
                            Id = new Guid("2ea4afa0-b2cf-4cf1-bfa4-d8b975412ccb"),
                            Name = "Closed",
                            WorkItemBaseState = 2,
                            WorkItemTypeId = new Guid("5fe4f257-f7a3-4996-9818-b72098dcb59c")
                        },
                        new
                        {
                            Id = new Guid("e25ee486-41aa-44b3-8897-95528d5b7b9d"),
                            Name = "Removed",
                            WorkItemBaseState = 3,
                            WorkItemTypeId = new Guid("5fe4f257-f7a3-4996-9818-b72098dcb59c")
                        });
                });

            modelBuilder.Entity("Domain.WorkItemType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkItemTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5fe4f257-f7a3-4996-9818-b72098dcb59c"),
                            Name = "User Story"
                        });
                });

            modelBuilder.Entity("Domain.WorkItem", b =>
                {
                    b.HasOne("Domain.WorkItemType", "WorkItemType")
                        .WithMany()
                        .HasForeignKey("WorkItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkItemType");
                });

            modelBuilder.Entity("Domain.WorkItemState", b =>
                {
                    b.HasOne("Domain.WorkItemType", "WorkItemType")
                        .WithMany("AvailableWorkItemStates")
                        .HasForeignKey("WorkItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkItemType");
                });

            modelBuilder.Entity("Domain.WorkItemType", b =>
                {
                    b.Navigation("AvailableWorkItemStates");
                });
#pragma warning restore 612, 618
        }
    }
}
